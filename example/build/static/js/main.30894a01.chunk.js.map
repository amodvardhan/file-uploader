{"version":3,"sources":["../../src/index.tsx","App.tsx","index.tsx"],"names":["props","onFileUpload","uploadProgress","totalFiles","useState","useEffect","dropArea","document","progressBar","wireEvents","highglightArea","unhighlightArea","unwireEvents","forEach","eventName","preventDefaults","e","wireEvent","highlight","unhighlight","handleDrop","files","handleFiles","i","initializeProgress","uploadFile","file","xhr","updateProgress","index","convertToByteArray","arr","array","setFileArray","prevState","previewFile","reader","img","fileNumber","total","tot","Promise","fileReader","buffer","Uint8Array","byteArray","resolve","reject","id","className","React","style","textAlign","IconComponent","type","multiple","accept","fileType","onChange","counter","Array","htmlFor","enableProgress","max","value","enablePreview","App","information","buttonLabel","filesInArray","console","log","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.30894a01.chunk.js","sourcesContent":["import React,{useEffect, useState } from 'react'\nimport './styles.module.css'\n\ninterface Props {\n  text: string\n}\n\nexport const ExampleComponent = ({ text }: Props) => {\n  return <div className={''}>Example Component: {text}</div>\n}\n\ninterface IFileUploaerProps {\n /** Drag and Drop information label text  */\n  information: string,\n  /** Allow files types allowed to be uploaded  default is 'images/*' */\n  fileType: string,\n  /** Allow multiple files  default is true */\n  multiple: boolean,\n  /** Set Button label/text default is Select Files  */\n  buttonLabel: string,\n  /** Component which holds an icon Ex. <span className=\"drag-drop-icon\"></span> */\n  IconComponent?: any,\n\n  /** If enabled uploaded files show preview, only for image */\n  enablePreview?: boolean\n /** If enabled uploaded files show progress */\n  enableProgress?: boolean\n\n  /** Once all the files are upload it update the caller with Array<ArrayBuffer> */\n  onFileUpload : (filesInByteArray: Array<ArrayBuffer> ) => void,\n\n}\n/** File uploader with drag and drop events */\nfunction FileUploader(props: IFileUploaerProps) {\n  const { information, fileType, multiple, buttonLabel, IconComponent, enablePreview, enableProgress , onFileUpload } = props;\n  // global variables \n  let dropArea: any;\n  let progressBar: any;\n  let uploadProgress: number[] = [];\n  let totalFiles: number = 0;\n\n   const [[], setFileArray] = useState<Array<ArrayBuffer>>([])\n  \n  useEffect(() => {\n    dropArea = document.getElementById('drop-area');\n    progressBar = document.getElementById('progress-bar')\n\n    // wiring events \n    wireEvents();\n    highglightArea(true);\n    unhighlightArea(true);\n    dropArea.addEventListener('drop', handleDrop, false);\n\n    return () => {\n      // unwiring events\n      unwireEvents();\n      highglightArea(false);\n      unhighlightArea(false);\n      dropArea.removeEventListener('drop', handleDrop, false)\n    }\n    }, [])\n  \n  // bind the events \nconst wireEvents = () => ['dragenter', 'dragover', 'dragleave', 'drop'].forEach(eventName => {\n    dropArea?.addEventListener(eventName, preventDefaults, false)\n })\n  \n  // unbind the events attached\nconst unwireEvents = () => ['dragenter', 'dragover', 'dragleave', 'drop'].forEach(eventName => {\n    dropArea?.removeEventListener(eventName, preventDefaults, false)\n })\n  \n  // prevent defaults the events \nconst preventDefaults = (e:any)  => {\n  e.preventDefault();\n  e.stopPropagation();\n}\n  \n  // triggers when dragenter and dragover event is fired \n  const highglightArea = (wireEvent: boolean) => {\n    ['dragenter', 'dragover'].forEach(eventName => {\n      wireEvent ?  dropArea?.addEventListener(eventName, highlight, false) :  dropArea?.removeEventListener(eventName, highlight, false)\n    })\n  }\n\n  // triggers when dragleave and drop are triggered\n  const unhighlightArea = (wireEvent: boolean) => {\n    ['dragleave', 'drop'].forEach(eventName => {\n      wireEvent ? dropArea?.addEventListener(eventName, unhighlight, false) : dropArea?.removeEventListener(eventName, unhighlight, false)\n    })\n  }\n\n  // add 'highlight' class once drag is performed\nconst highlight = () => {\n  dropArea?.classList.add('highlight')\n}\n\n  // remove 'highlight' class once drop is performed\nconst unhighlight = ()  => {\n  dropArea?.classList.remove('highlight')\n}\n  \n// triggers when files are being dropped \nconst handleDrop = (e: any)  => {\n  let dt = e.dataTransfer\n  let files = dt.files\n\n  handleFiles(files)\n}\n  \n const handleFiles = (files: any) => { \n   files = [...files];\n   totalFiles = files.length;\n\n   initializeProgress(files.length);\n   files.forEach(uploadFile);\n   files.forEach(previewFile);\n}\n  \n  const onFileChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const files: any = e.target.files;\n    totalFiles = files ? files.length : 0;\n    let counter = 0;\n    for (let index = 0; index < totalFiles; index++){\n      uploadFile(files[index], ++counter);\n    }\n    Array.from(files).forEach(previewFile);\n  }\n\n  // trigges when files are being uploaded\n  const uploadFile = (file: File, index: number) => {\n    const xhr = new XMLHttpRequest();\n\n    xhr.upload.addEventListener(\"progress\",  (e) => {      \n      updateProgress(index, (e.loaded * 100.0 / e.total) || 100);\n    })\n\n    convertToByteArray(file).then((arr: ArrayBuffer) => {\n      let array: Array<ArrayBuffer> = [];\n\n      setFileArray(prevState => {\n        array = [...prevState, arr];\n        return array;\n      })\n\n      if (index === totalFiles) {\n        onFileUpload(array);\n      }\n    });\n\n  }\n\n  // show the uploaded files as a preview\n  const previewFile = (file: any) => {\n   \n  const isFileImage =  file && file['type'].split('/')[0] === 'image';\n    if (!isFileImage) return;\n    \n  let reader = new FileReader()\n  reader.readAsDataURL(file)\n  reader.onloadend = function() {\n    const img = document.createElement('img')\n    img.src = reader.result as string;\n    document.getElementById('gallery')?.appendChild(img);\n  }\n }\n  \n// inititalize the progress bar\nfunction initializeProgress(numFiles: any) {\n  progressBar.value = 0\n  uploadProgress = []\n\n  for(let i = numFiles; i > 0; i--) {\n    uploadProgress.push(0)\n  }\n}\n\n// update the progress bar status\nconst updateProgress = (fileNumber: any, percent: any) => {\n  uploadProgress[fileNumber] = percent\n  let total = uploadProgress.reduce((tot, curr) => tot + curr, 0) / uploadProgress.length\n  progressBar.value = total\n}\n\n  // A promise object which reads the file and converts it to the byte[]\n  const convertToByteArray = (file: File) => new Promise((resolve, reject) => {\n    const fileReader = new FileReader();\n    fileReader.readAsArrayBuffer(file);\n\n    // make sure the file is in READY state, so that we can process the image file\n    fileReader.onload = function () {\n        const buffer = new Uint8Array(fileReader.result as ArrayBuffer);\n        let byteArray: any = [];\n        for (var i = 0; i < buffer.length; i++) {\n            byteArray.push(buffer[i]);\n        }\n      if (byteArray) {\n        resolve(byteArray);\n      } else {\n        reject([]);\n      }\n    };\n})\n  \n  return (\n    <div id=\"drop-area\">\n      <div className=\"my-form\">\n        <div>{information}</div>\n        <div style={{ textAlign: 'center' }}>\n          {\n            IconComponent && <IconComponent />\n          }\n        </div>\n        <div>\n          <input type=\"file\" id=\"fileElem\" multiple={multiple} accept={ fileType} onChange={onFileChange } />\n          <label className=\"button\" htmlFor=\"fileElem\">{buttonLabel}</label>\n        </div>\n      </div>\n\n      { enableProgress && <progress id=\"progress-bar\" max=\"100\" value=\"0\" ></progress> }\n      { enablePreview && <div id=\"gallery\"></div> }\n\n    </div>\n  )\n}\n\nexport default FileUploader ","import React from 'react'\n\nimport FileUploader from '@amodv/react-file-uploader'\nimport '@amodv/react-file-uploader/dist/index.css'\n\nconst App = () => {\n  return (\n    <>\n      <FileUploader\n        information=\"Upload multiple files with the file dialog or by dragging and dropping images onto the dashed region\"\n        fileType=\"image/*\"\n        buttonLabel=\"Select some files\"\n        multiple\n        enablePreview\n        enableProgress\n        IconComponent={() => <strong>Icon Placeholer</strong>}\n        onFileUpload={ (filesInArray: Array<ArrayBuffer>) => {\n          return console.log(filesInArray)\n        }}\n      />\n    </>\n  )\n}\n\nexport default App\n","import './index.css'\n\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}